<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql语句，后继有重要重要
	 #{}：点位符，相当于jdbc的?
	 ${}：字符串拼接指令，如果入参为普通数据类型{}内部只写value
	 ``:字段名和表明用``包装 键盘左上角波浪线下边的符号 mysql特殊的语法
-->
<!--  
动态代理dao开发规则:
1.namespace必需是接口的全路径名
2.接口的方法名必需与映射文件的sql id一致
3.接口的输入参数必需与映射文件的parameterType类型一致
4.接口的返回类型必须与映射文件的resultType类型一致
-->
<mapper namespace="com.sly.mybatis.mapper.UserMapper">
	<!-- id:sql id，语句的唯一标识
             parameterType:入参的数据类型
             resultType:返回结果的数据类型
        -->
	<!--  sql片段-->
	<sql id="user_sql">
		  `id`,
		  `username`,
		  `sex`,
		  `birthday`,
		  `address`
	</sql>
	<select id="getUserById" parameterType="int" resultType="User">
		SELECT
		<!--  sql片段的使用-->
		  <include refid="user_sql"/>
		FROM `userinfo`
		WHERE id = #{id}
	</select>
	 <!--resultType：如果返回结果为集合，只需设置为每一个的数据类型-->
		<!--<select id="getUserByUserName" parameterType="string" resultType="User">-->
			<!--SELECT-->
			  <!--`id`,-->
			  <!--`username`,-->
			  <!--`birthday`,-->
			  <!--`sex`,-->
			  <!--`address`-->
			<!--FROM `user`-->
			<!--&lt;!&ndash; WHERE username LIKE #{name} &ndash;&gt;-->
			<!--WHERE username LIKE '%${value}%'-->
		<!--</select>-->
		<!-- 插入用户 -->
		<!-- useGeneratedKeys:使用自增  keyProperty与之配套使用，这里是user的主键-->
	<insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
		<!-- selectKey：主键返回
			 keyProperty:user中的主键属性
			 resultType:主键数据类型
			 order:指定selectKey何时执行：AFTER之后
		-->
		<!-- <selectKey keyProperty="id" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey> -->
		INSERT INTO `userinfo`
		(`username`,
		`sex`,
		`birthday`,
		`address`)
		VALUES (#{username},
		#{gender},
		#{birthday},
		#{address})
	</insert>
		<!--<update id="updateUser" parameterType="user">-->
		<!--update `user` set `username` = #{username},`address` = #{address} where `id`  = #{id}-->
		<!--</update>-->
		<!--<delete id="deleteUser" parameterType="int">-->
		<!--delete from `user` where `id` = #{id2}-->
		<!--</delete>-->
		<!--&lt;!&ndash;  返回值类型是简单类型&ndash;&gt;-->
		<!--<select id="getUserCount" resultType="int">-->
		<!--select count(1) from `user`-->
		<!--</select>-->
		<!--&lt;!&ndash; 动态sql if标签  where标签 sql片段 foreach标签&ndash;&gt;-->
		<!--<select id="getUserByPojo" parameterType="user" resultType="User">-->
			<!--SELECT-->
			  <!--`id`,-->
			  <!--`username`,-->
			  <!--`birthday`,-->
			  <!--`sex`,-->
			  <!--`address`-->
			<!--FROM `user`-->
			<!--&lt;!&ndash; WHERE 1 = 1-->
			<!--<if test="username !=null and username != ''">-->
			<!--and username LIKE '%${username}%'-->
			<!--</if>-->
			<!--<if test="sex !=null and sex != ''">-->
			<!--and  sex = #{sex}-->
			<!--</if> &ndash;&gt;-->
			<!--&lt;!&ndash; <where>自动补上where关键字并处理多余的and 用了where标签就不能再加where关键字 &ndash;&gt;-->
			<!--<where>-->
			<!--<if test="username !=null and username != ''">-->
			<!--and username LIKE '%${username}%'-->
			<!--</if>-->
			<!--<if test="sex !=null and sex != ''">-->
			<!--or  sex = #{sex}-->
			<!--</if>-->
			<!--</where>-->
		<!--</select>-->
		<!--<select id="getUserByIds" parameterType="queryvo" resultType="user">-->
		<!--select-->
		<!--<include refid="user_sql"/>-->
		<!--from `user`-->
		<!--<where>-->
		<!--&lt;!&ndash;-->
		<!--foreach标签 循环标签-->
		<!--collection：要遍历的集合-->
		<!--open：循环开始之前要输出的内容-->
		<!--close：循环结束之后要输出的内容-->
		<!--item：循环的变量-->
		<!--separator：分隔符-->
		<!--&ndash;&gt;-->
		<!--&lt;!&ndash;  id in(16,22,24,28) &ndash;&gt;-->
		<!--<foreach collection="ids" open="id in(" separator="," item="uid" close=")" >-->
			<!--#{uid}-->
		<!--</foreach>-->
		<!--</where>-->
		<!--</select>-->
</mapper>